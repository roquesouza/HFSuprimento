
/* * To change this template, choose Tools | Templates * and open the template in the editor. */package br.com.hosflow.util;import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import br.com.topsys.util.TSUtil;
import br.com.topsys.web.util.TSFacesUtil;
/** * * @author roque souza */public class Utilitario {  public static Long tratarLong(Long valor) {    if (!TSUtil.isEmpty(valor) && valor.equals(0L)) {      valor = null;    }    return valor;  }  public static Double tratarDouble(Double valor) {    if (!TSUtil.isEmpty(valor) && valor.equals(0D)) {      valor = null;    }    return valor;  }  public static Integer tratarInteger(Integer valor) {    if (!TSUtil.isEmpty(valor) && valor.equals(0)) {      valor = null;    }    return valor;  }  public static Long getIdade(Date dataNascimento) {    Calendar agora = Calendar.getInstance();    int ano = 0;    int mes = 0;    int dia = 0;    Calendar nascimento = Calendar.getInstance();    nascimento.setTime(dataNascimento);    int anoNasc = 0;    int mesNasc = 0;    int diaNasc = 0;    int idade = 0;    ano = agora.get(Calendar.YEAR);    mes = agora.get(Calendar.MONTH) + 1;    dia = agora.get(Calendar.DAY_OF_MONTH);    anoNasc = nascimento.get(Calendar.YEAR);    mesNasc = nascimento.get(Calendar.MONTH) + 1;    diaNasc = nascimento.get(Calendar.DAY_OF_MONTH);    idade = ano - anoNasc;    if (mes < mesNasc) {      idade--;    } else {      if (dia < diaNasc) {        idade--;      }    }    if (idade < 0) {      idade = 0;    }    return new Long(idade);  }  public static String calcularIdade(Date dataNascimento) {    Date hoje = new Date();    Calendar cal = Calendar.getInstance();    String idade;    cal.setTime(hoje);    int d1 = cal.get(Calendar.DAY_OF_YEAR);    int dm1 = cal.get(Calendar.DAY_OF_MONTH);    int m1 = cal.get(Calendar.MONTH);    int a1 = cal.get(Calendar.YEAR);    cal.setTime(dataNascimento);    int d2 = cal.get(Calendar.DAY_OF_YEAR);    int dm2 = cal.get(Calendar.DAY_OF_MONTH);    int m2 = cal.get(Calendar.MONTH);    int a2 = cal.get(Calendar.YEAR);    int anos = a1 - a2;    int meses = m1 - m2;    if (meses < 0) {      meses = meses + 12;    }    if (meses == 0) {      if (d1 < d2) {        meses = 12;      } else {        meses = 0;      }    }    if (d1 < d2) {      anos--; //Ainda não completou aniversario esse ano.          }    if (dm1 < dm2) {      meses--;    }    idade = anos + "A " + meses + "M";    return idade;  }  //-------- Valida CPF ou CNPJ  public static boolean valida_CpfCnpj(String s_aux) {//------- Rotina para CPF       if (s_aux.length() == 11) {      int d1, d2;      int digito1, digito2, resto;      int digitoCPF;      String nDigResult;      d1 = d2 = 0;      digito1 = digito2 = resto = 0;      for (int n_Count = 1; n_Count < s_aux.length() - 1; n_Count++) {        digitoCPF = Integer.valueOf(s_aux.substring(n_Count - 1, n_Count)).intValue();//--------- Multiplique a ultima casa por 2 a seguinte por 3 a seguinte por 4 e assim por diante.        d1 = d1 + (11 - n_Count) * digitoCPF;//--------- Para o segundo digito repita o procedimento incluindo o primeiro digito calculado no passo anterior.        d2 = d2 + (12 - n_Count) * digitoCPF;      };//--------- Primeiro resto da divisão por 11.      resto = (d1 % 11);//--------- Se o resultado for 0 ou 1 o digito é 0 caso contrário o digito é 11 menos o resultado anterior.      if (resto < 2) {        digito1 = 0;      } else {        digito1 = 11 - resto;      }      d2 += 2 * digito1;//--------- Segundo resto da divisão por 11.      resto = (d2 % 11);//--------- Se o resultado for 0 ou 1 o digito é 0 caso contrário o digito é 11 menos o resultado anterior.      if (resto < 2) {        digito2 = 0;      } else {        digito2 = 11 - resto;      }//--------- Digito verificador do CPF que está sendo validado.      String nDigVerific = s_aux.substring(s_aux.length() - 2, s_aux.length());//--------- Concatenando o primeiro resto com o segundo.      nDigResult = String.valueOf(digito1) + String.valueOf(digito2);//--------- Comparar o digito verificador do cpf com o primeiro resto + o segundo resto.      return nDigVerific.equals(nDigResult);    } //-------- Rotina para CNPJ    else if (s_aux.length() == 14) {      int soma = 0, aux, dig;      String cnpj_calc = s_aux.substring(0, 12);      char[] chr_cnpj = s_aux.toCharArray();//--------- Primeira parte      for (int i = 0; i < 4; i++) {        if (chr_cnpj[i] - 48 >= 0 && chr_cnpj[i] - 48 <= 9) {          soma += (chr_cnpj[i] - 48) * (6 - (i + 1));        }      }      for (int i = 0; i < 8; i++) {        if (chr_cnpj[i + 4] - 48 >= 0 && chr_cnpj[i + 4] - 48 <= 9) {          soma += (chr_cnpj[i + 4] - 48) * (10 - (i + 1));        }      }      dig = 11 - (soma % 11);      cnpj_calc += (dig == 10 || dig == 11)              ? "0" : Integer.toString(dig);//--------- Segunda parte      soma = 0;      for (int i = 0; i < 5; i++) {        if (chr_cnpj[i] - 48 >= 0 && chr_cnpj[i] - 48 <= 9) {          soma += (chr_cnpj[i] - 48) * (7 - (i + 1));        }      }      for (int i = 0; i < 8; i++) {        if (chr_cnpj[i + 5] - 48 >= 0 && chr_cnpj[i + 5] - 48 <= 9) {          soma += (chr_cnpj[i + 5] - 48) * (10 - (i + 1));        }      }      dig = 11 - (soma % 11);      cnpj_calc += (dig == 10 || dig == 11)              ? "0" : Integer.toString(dig);      return s_aux.equals(cnpj_calc);    } else {      return false;    }  }  @SuppressWarnings("rawtypes")public static void gerarResultadoLista(List lista) {    if (TSUtil.isEmpty(lista)) {      TSFacesUtil.addInfoMessage("A pesquisa não retornou ocorrência");    } else {      Integer tamanho = lista.size();      if (tamanho.equals(1)) {        TSFacesUtil.addInfoMessage("A pesquisa retornou uma ocorrência");      } else {        TSFacesUtil.addInfoMessage("A pesquisa retornou " + tamanho + " ocorrências");      }    }  }  public static boolean isNumeric(String numero) {    try {      BigDecimal bg = new BigDecimal(numero);      return true;    } catch (NumberFormatException ex) {      return false;    }  }  public static String getDataPorExtenso(Calendar calendar) {    if (TSUtil.isEmpty(calendar)) {      return null;    }    StringBuilder data = new StringBuilder();    data.append(calendar.get(Calendar.DAY_OF_MONTH));    data.append(" de ");    switch (calendar.get(Calendar.MONTH)) {      case 0:        data.append(" janeiro de ");        break;      case 1:        data.append(" fevereiro de ");        break;      case 2:        data.append(" março de ");        break;      case 3:        data.append(" abril de ");        break;      case 4:        data.append(" maio de ");        break;      case 5:        data.append(" junho de ");        break;      case 6:        data.append(" julho de ");        break;      case 7:        data.append(" agosto de ");        break;      case 8:        data.append(" setembro de ");        break;      case 9:        data.append(" outubro de ");        break;      case 10:        data.append(" novembro de ");        break;      case 11:        data.append(" dezembro de ");        break;    }    data.append(calendar.get(Calendar.YEAR));    return data.toString();  }    public static boolean isMesAnoValido(String mesAno) {	  	  if(TSUtil.isEmpty(mesAno)) {		  return false;	  }	  if(mesAno.indexOf("/")!=2) {		  return false;	  }	  	  String mes = mesAno.substring(0,2);	  String ano = mesAno.substring(3,7);	  try {		  Integer mesDigit = Integer.parseInt(mes);		  Integer anoDigit = Integer.parseInt(ano);		  return mesDigit>0 && mesDigit<=12 && anoDigit>=2012;	  }catch(Exception ex) {		  return false;	  }	    }
  public static void addWarnMessage(String warnMessage) {
	  FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, null, warnMessage));
  }}

